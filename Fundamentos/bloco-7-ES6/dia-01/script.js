//  Parte I   - Exercicio 01
/* function testingScope(escopo) {
    if (escopo === true) {
        var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
        ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
        console.log(ifScope);
    } else {
        var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
        console.log(elseScope);
    }
    console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
}

testingScope(true); */


// mudar a estrutura da fun√ß√£o para que ela seja uma arrow function.
/* const testingScope = escopo => {
    if (escopo === true) {
        var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
        ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
        console.log(ifScope);
    } else {
        var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
        console.log(elseScope);
    }
    console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
}

testingScope(true); */

// mudar as concatena√ß√µes para template literals.
/* const testingScope = escopo => {
    if (escopo === true) {
        var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
        ifScope = '${ifScope} √≥timo, fui utilizada no escopo !';
        console.log(ifScope);
    } else {
        var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
        console.log(elseScope);
    }

}

testingScope(true);
 */

// Parte I  - Exercicio 02
/* const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu c√≥digo aqui.

console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ */

// Fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente. Use
// o template literals ara que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu 
// c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
/* const oddsAndEvens = [13, 3, 4, 10, 7, 2];
const sortOddsAndEvens = () => {
    oddsAndEvens[0] = 2;
    oddsAndEvens[1] = 3;
    oddsAndEvens[2] = 4;
    oddsAndEvens[3] = 7;
    oddsAndEvens[4] = 10;
    oddsAndEvens[5] = 13;

    return oddsAndEvens;
}

const sortedArray = sortOddsAndEvens()
console.log(`Os n√∫meros ${sortedArray} se encontram ordenados de forma crescente!`); */


// usando array sort
/* const oddsAndEvens = [13, 3, 4, 10, 7, 2];

oddsAndEvens.sort((a, b) => {
    if (a > b) return 1;
    if (a < b) return -1;
    return 0;
});

console.log(oddsAndEvens); */


// Parte II  - Exercicio 01

/* Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos 
para desenvolver. √â fundamental que voc√™ utilize o que 
aprendeu sobre let , const , arrow functions , 
template literals e ternary operator . */
// 1 - Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
/* Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! ,
√© o produto de todos os inteiros menores ou iguais a N . 
Exemplo: 4! = 4 * 3 * 2 * 1 = 24. */

/* const factorial = (number) => {
    let result = 1;
    for (let index = 2; index <= number; index += 1) {
        result *= index;
    }
    return result;
}

console.log(factorial(4)); */

// Recursiva
/* B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva .
 Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator . */
/* 
const factorial = number => number > 1 ? number * factorial(number - 1) : 1;
console.log(factorial(4));
 */
// Parte II  - Exercicio 02
// Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
// exemplo :longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu')
// retorna 'aconteceu'
/* const longestWord = frase => {
    let arrayStr = frase.split(' ');
    let maior = 0;
    let palavra = '';

    for (const str of arrayStr) {
        if (str.length > maior) {
            maior = str.length;
            palavra = str;
        }
    }
    return palavra;
}
console.log(longestWord("Antonio foi ao banheiro e n√£o sabemos o que aconteceu"));
 */
// longestWord com sort em uma linha
/* const longestWord = frase => frase.split(' ').sort((a, b) => b.length - a.length)[0];
console.log(longestWord('Antonio foi ao banheiro e n√£o sabemos o que aconteceu')); */

// Parte II - Exercicio 3
/* Crie uma p√°gina que contenha:
Um bot√£o ao qual ser√° associado um event listener ;
Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a 
vari√°vel clickCount √© atualizada. */


/* let clickCount = 0;
let contaButton = document.getElementById('#texto')
document.getElementById('but')
    .addEventListener('click', () => contaButton.innerHTML= clickCount += 1); */

// Parte II - Exercicio 4
/*  Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:
N√£o se esque√ßa de usar template literals
Fun√ß√£o 1 : Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. 
Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ 
determinar e substituir pela string que voc√™ passou como par√¢metro. 
Sua fun√ß√£o deve retornar essa nova string .
Exemplo:
String determinada: "Tryber x aqui!"
Par√¢metro: "Bebeto"
Retorno: "Tryber Bebeto aqui!"
Um array com escopo global, que √© o escopo do arquivo JS , nesse caso, 
contendo cinco strings com suas principais skills .
 */

const array = ["Android", "iOS", "Architecture", "Teach ", "Run"];

function buildSkillsPhrase(param) {
    const fun1 = paramInner => (
        `Tryber ${paramInner} aqui!  Tudo bem?`
    );
    let rsult = `${fun1(param)}
    Minhas cinco principais habilidades s√£o:`;
    array.forEach((skill, index) =>
        rsult = `${rsult} - ${skill}`);
    rsult = `${rsult} #goTrybe`;
    return rsult;
}

console.log(buildSkillsPhrase("Patr√≠cia"));